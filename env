#!/bin/bash

# Check if we're already in a managed environment
if [ -n "$MANAGED_ENV" ]; then
    echo "Error: Already in a managed environment. Please exit the current one first."
    exit 1
fi

echo "Initializing new environment..."

# Get script location and set bin directory path
SCRIPT_DIR="$( cd "$( dirname "$0" )" && pwd )"
BIN_DIR="${SCRIPT_DIR}/bin"

# Create bin directory if it doesn't exist
mkdir -p "${BIN_DIR}"

# Determine OS and architecture
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)
case "$ARCH" in
    "x86_64") ARCH="amd64" ;;
    "aarch64"|"arm64") ARCH="arm64" ;;
esac

# Construct platform string
PLATFORM="${OS}-${ARCH}"

if [ -f "$BIN_DIR/bazel" ]; then
    # Check current version (remove any 'v' prefix for consistent comparison)
    CURRENT_VERSION="$($BIN_DIR/bazel version | grep "Bazelisk version" | cut -d' ' -f3 | sed 's/^v//')"
    echo "Current Bazelisk version: $CURRENT_VERSION"
fi

# Get latest version from GitHub API (remove any 'v' prefix)
LATEST_VERSION=$(curl -s "https://api.github.com/repos/bazelbuild/bazelisk/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/^v//')
echo "Latest Bazelisk version: $LATEST_VERSION"

# Download if file doesn't exist or version is different
if [ ! -f "$BIN_DIR/bazel" ] || [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
    if [ -f "$BIN_DIR/bazel" ] && [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
        echo "Bazelisk is already up to date"
    else
        echo "Downloading bazelisk v${LATEST_VERSION} for ${PLATFORM}..."
        curl -L "https://github.com/bazelbuild/bazelisk/releases/download/v${LATEST_VERSION}/bazelisk-${PLATFORM}" -o "$BIN_DIR/bazel"
        chmod +x "$BIN_DIR/bazel"
    fi
fi

# Run bazel once to download and install toolchain
echo "Installing Bazel toolchain..."
"$BIN_DIR/bazel" --version

# Create shortcuts to tools
echo "Creating shortcuts to tools..."

# Build required toolchains
echo "Building toolchains..."

# Define targets and their corresponding binary names using parallel arrays
BAZEL_TARGETS=(
    "@rules_go//go"
    "@com_google_protobuf//:protoc"
    "@python_3_13//:python3"
    "@buildifier_prebuilt//:buildifier"
)

BINARY_NAMES=(
    "go"
    "protoc"
    "python3"
    "buildifier"
)

echo "Building targets: ${BAZEL_TARGETS[*]}"

# Build the targets directly
"$BIN_DIR/bazel" build "${BAZEL_TARGETS[@]}"

# Create stub scripts for each target
for i in "${!BAZEL_TARGETS[@]}"; do
    target="${BAZEL_TARGETS[$i]}"
    script_name="${BINARY_NAMES[$i]}"
    
    # Get the binary path from bazel with specific grep pattern
    BINARY_PATH=$($BIN_DIR/bazel cquery --output=files "$target" | grep "${script_name}$")
    
    # Skip if no binary found
    [ -z "$BINARY_PATH" ] && continue
    
    # Determine full path based on whether it's external or not
    if [[ "$BINARY_PATH" == external/* ]]; then
        # For external paths, prepend bazel's output_base
        FULL_PATH="$($BIN_DIR/bazel info output_base)/$BINARY_PATH"
    else
        # For internal paths, use realpath
        FULL_PATH="$(realpath "$BINARY_PATH")"
    fi
    
    # Create the stub script using the determined full path
    echo "\"$FULL_PATH\" \"\$@\"" > "$BIN_DIR/$script_name"
    chmod +x "$BIN_DIR/$script_name"
done

# Setup Python environment
echo "Setting up Python environment..."

if [ ! -f .venv/bin/activate ]; then
    echo "Virtual environment not found, creating..."
    "$BIN_DIR/python3" -m venv "${SCRIPT_DIR}/.venv"
fi

# shellcheck disable=SC1091
source "${SCRIPT_DIR}/.venv/bin/activate"
pip install -r "${SCRIPT_DIR}/requirements.txt"

# Create the command to start the new shell with modified PATH
NEW_PATH="${BIN_DIR}:${PATH}"

# Start new shell with modified environment
exec env -i \
    HOME="$HOME" \
    TERM="$TERM" \
    USER="$USER" \
    SHELL="$SHELL" \
    PATH="$NEW_PATH" \
    MANAGED_ENV=1 \
    PS1="$PS1" \
    "$SHELL"